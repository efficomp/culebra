# Parameters regarding the datset
[dataset]

  # Parameters regarding the whole dataset
  [dataset.parameters]
    # Index of the output column. Only used if input and ouput columns are in
    # the same file.
    # If input and output columns are in different files this parameter should
    # be omitted
    output_index = -1

    # Seperator for columns in the files. Defaults to "\\s+" if omitted
    sep = "\\s+"

    # If this parameter is set, the training dataset will be considered as the
    # only dataset, which will be split into a training and test dataset
    # according to this proportion. The [dataset.test] section will be ignored.
    test_prop = 0.25

    # If true the input data is normalized in [0, 1]. Defaults to false if
    # omitted
    normalize = true

    # If this parameter is set, some random features add appended to the
    # dataset
    # random_feats = 10

    # Seed for the random number generator, defaults to None if omitted
    random_seed = 0

  # Parameters regarding the training data
  [dataset.training]
    # Inputs file if input and output columns are seperated in two files.
    # Otherwise this file contains the whole dataset
    file = "https://archive.ics.uci.edu/ml/machine-learning-databases/statlog/australian/australian.dat"

    # Output values. Only used if output_index is omitted
    # output_file = # Not set since output_index is set

  # Parameters regarding the test data. This section is taken into account
  # only if test_prop is omitted
    # [dataset.test]
      # Inputs file if input and output columns are seperated in two files.
      # Otherwise this file contains the whole dataset
      # Only used if test_prop is omitted
      # file = # Not set since test_proportion is set

      # Output values. Only used if both test_prop and output_index are omitted
      # output_file = # Not set since test_prop is set

# Parameters regarding the wrapper method
[wrapper]
  # Type of wrapper used
  wrapper_cls = "culebra.wrapper.EvolutionaryWrapper"

  # Type of individual used
  individual_cls = "culebra.feature_selector.BitVector"

  # Individual species
  [wrapper.species]
    species_cls = "culebra.feature_selector.Species"

    # Parameters for the individual species
    [wrapper.species.parameters]
      # Number of features
      num_feats = 14

      # Minimum feature index
      # min_feat = # Use the default value

      # Maximum feature index
      # max_feat = # Use the default value

      # Minimum individual size
      min_size = 1

      # Maximum individual size
      # max_size = # Use the default value

  # Parameters for the wrapper method
  [wrapper.parameters]

    # Seed for the random number generator, defaults to None if omitted
    random_seed = 0

    # Whether or not to log the statistics, defaults to true
    # verbose = true

    # Checkpoint frequency
    checkpoint_freq = 10

    # Checkpoint filepath
    checkpoint_file = "checkpoint.gz"

    # Population size
    pop_size = 100

    # Number of generations
    n_gens = 100

    # Crossover function
    # xover_func = # Use the individual's default

    # Crossover probability
    xover_pb = 0.5

    # Mutation function
    # mut_func = # Use the individual's default

    # Mutation probability
    mut_pb = 0.1

    # Independent gene mutation probability
    mut_ind_pb = 0.05

    # Selection function
    sel_func = "deap.tools.selTournament"

    # Selection function parameters
    [wrapper.parameters.sel_func_params]
      tournsize = 2

# Parameters regarding the fitness evaluation
[fitness]
  # Parameters for the training fitness
  [fitness.training]
#    fitness_cls = "culebra.fitness.KappaIndexFitness"
    fitness_cls = "culebra.fitness.NumFeatsFitness"

    # Parameters for the fitness evaluation
    [fitness.training.parameters]
      # Validation proportion
      valid_prop = 0.25
      thresholds = 0.00001

    # Classifier
    [fitness.training.classifier]
      # Classifier class
      classifier_cls = "sklearn.naive_bayes.GaussianNB"

      # Parameters for the classifier
      # [fitness.training.classifier.parameters]
        # Portion of the largest variance of all features that is added to
        # variances for calculation stability
        # var_smoothing = 1e-9

  # Parameters for the test Fitness
  # If omitted, the training fitness will be also used to test
  [fitness.test]
#    fitness_cls = "culebra.fitness.KappaIndexFitness"
    fitness_cls = "culebra.fitness.NumFeatsFitness"

    # Parameters for the fitness evaluation
    # [fitness.test.parameters]
      # Validation proportion
      # valid_prop = # Use the whole dataset

    # Classifier
    [fitness.test.classifier]
      # Classifier class
      classifier_cls = "sklearn.naive_bayes.GaussianNB"

      # Parameters for the classifier
      # [fitness.test.classifier.parameters]
        # Portion of the largest variance of all features that is added to
        # variances for calculation stability
        # var_smoothing = 1e-9
